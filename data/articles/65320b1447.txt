Inside the breach that broke the internet: The untold story of Log4Shell - The GitHub Blog
Learn about artificial intelligence and machine learning across the GitHub ecosystem and the wider industry.
Explore the capabilities and benefits of AI code generation and how it can improve your developer experience.
Resources for developers to grow in their skills and careers.
Learn how to move into your first professional role.
Learn how to start building, shipping, and maintaining software with GitHub.
Get an inside look at how we‚Äôre building the home for all developers.
Discover how we deliver a performant and highly available experience across the GitHub platform.
Explore best practices for building software at scale with a majority remote team.
Get a glimpse at the technology underlying the world‚Äôs leading AI-powered developer platform.
Learn how we build security into everything we do across the developer lifecycle.
Find out what goes into making GitHub the home for all developers.
How we use GitHub to be more productive, collaborative, and secure
Our engineering and security teams do some incredible work. Let‚Äôs take a look at how we use GitHub to be more productive, build collaboratively, and shift security left.
Explore how to write, build, and deploy enterprise software at scale.
Automating your way to faster and more secure ships.
Tips, tools, and tricks to improve developer collaboration.
GitHub recognized as a Leader in the Gartner¬Æ Magic Quadrant‚Ñ¢ for AI Code Assistants
Learn why Gartner positioned GitHub as a Leader for the second year in a row.
Keep up with what‚Äôs new and notable from inside GitHub.
An inside look at news and product updates from GitHub.
The latest on GitHub‚Äôs platform, products, and tools.
The latest policy and regulatory changes in software.
Data-driven insights around the developer ecosystem.
Learn how to use retrieval-augmented generation (RAG) to capture more insights.
Organizations worldwide are incorporating open source methodologies into the way they build and ship their own software.
Learn about core challenges in DevSecOps, and how you can start addressing them with AI and automation.
Learn about artificial intelligence and machine learning across the GitHub ecosystem and the wider industry.
Explore the capabilities and benefits of AI code generation and how it can improve your developer experience.
Resources for developers to grow in their skills and careers.
Learn how to move into your first professional role.
Learn how to start building, shipping, and maintaining software with GitHub.
Get an inside look at how we‚Äôre building the home for all developers.
Discover how we deliver a performant and highly available experience across the GitHub platform.
Explore best practices for building software at scale with a majority remote team.
Get a glimpse at the technology underlying the world‚Äôs leading AI-powered developer platform.
Learn how we build security into everything we do across the developer lifecycle.
Find out what goes into making GitHub the home for all developers.
How we use GitHub to be more productive, collaborative, and secure
Our engineering and security teams do some incredible work. Let‚Äôs take a look at how we use GitHub to be more productive, build collaboratively, and shift security left.
Explore how to write, build, and deploy enterprise software at scale.
Automating your way to faster and more secure ships.
Tips, tools, and tricks to improve developer collaboration.
GitHub recognized as a Leader in the Gartner¬Æ Magic Quadrant‚Ñ¢ for AI Code Assistants
Learn why Gartner positioned GitHub as a Leader for the second year in a row.
Keep up with what‚Äôs new and notable from inside GitHub.
An inside look at news and product updates from GitHub.
The latest on GitHub‚Äôs platform, products, and tools.
The latest policy and regulatory changes in software.
Data-driven insights around the developer ecosystem.
Learn how to use retrieval-augmented generation (RAG) to capture more insights.
Organizations worldwide are incorporating open source methodologies into the way they build and ship their own software.
Learn about core challenges in DevSecOps, and how you can start addressing them with AI and automation.
Inside the breach that broke the internet: The untold story of Log4Shell
Log4Shell proved that open source security isn‚Äôt guaranteed and isn‚Äôt just a code problem. It‚Äôs about supporting, enabling, and empowering the people behind the projects that build our digital infrastructure.
When Christian Grobmeier went to help his son with a Minecraft problem, he found the game displaying a warning: ‚ÄúWe are suffering from a security hole from Log4J, please be careful and update immediately.‚Äù
This is the untold story of how one maintainer and the
team navigated a crisis that exposed critical gaps in our digital infrastructure and demonstrated the importance of open source security and sustainability. Now, initiatives like the
It all started a few hours earlier on a cold November day, when Christian, who is a maintainer of the open source project Log4j, planned to spend time playing games with his son. Instead, he found himself staring at his phone, watching notifications pile up in his inbox‚Äî10, then 20 emails flooding in. When he saw the words ‚Äúremote code execution,‚Äù his first thought was: ‚ÄúMaybe I‚Äôm on the wrong mailing list.‚Äù
He wasn‚Äôt. And within hours, Christian would be at the center of what became known as Log4Shell: the most severe vulnerability in internet history, affecting billions of devices from Fortune 500 companies to Minecraft servers worldwide.
‚ÄúI told my son, I will play with you in like five minutes,‚Äù Christian recalls. ‚ÄúBut he didn‚Äôt see me for the next couple of days.‚Äù
Watch the full interview with Christian Grobmeier and Gregg Cochran, staff program manager at GitHub, above. üëÜ
Log4j is foundational software. This 20+ year-old Java logging library quietly powers system events in applications worldwide, like user logins and calculation results. But this small piece of software had quietly become a dependency in thousands of projects across the Java ecosystem.
Log4j is such a small, tiny library. But everybody can use it in their software.
That ubiquity made Log4Shell devastating. Financial services companies relied on it for compliance auditing. E-commerce systems used it to track security incidents. Insurance companies needed it to monitor their software behavior. In a 2022 Tidelift survey, 49% of open source developers reported that their organization relies on Java‚Äîand most of them were using Log4j without even knowing it.
When Christian realized the scope of the vulnerability, the weight hit him immediately: ‚ÄúLiterally all Java applications in the world could be affected. Even 10% would be a major problem. This would be catastrophic.‚Äù
Log4Shell reveals how a seemingly innocent feature became an attack vector. Log4j used
(JNDI) to provide flexibility, allowing developers to load software components from remote servers. But the library didn‚Äôt validate whether JNDI lookup strings were coming from trusted sources.
‚ÄúHow can a string break the internet?‚Äù Christian asks.
The exploitation was frighteningly simple. An attacker could input a malicious JNDI string into any application field that gets logged‚Äîa username field, a search box, even a Minecraft chat message‚Äîand execute remote code on the target system.
jndi:<protocol>://<server-name>:<port>/<path-to-object>
‚ÄúYou don‚Äôt even need to have special knowledge,‚Äù Christian notes. ‚ÄúYou just run around and push the string wherever you want it.‚Äù
The Common Vulnerability Scoring System (CVSS) gave Log4Shell a perfect 10: the highest possible score.
‚ÄúThe first time I heard about this score, I thought, maybe it‚Äôs not so bad,‚Äù Christian remembers. ‚ÄúAnd then after a couple of days, I thought, yeah,
maybe we should extend this to a score of 15 or 20.
The human cost of maintaining critical infrastructure
The personal toll on maintainers during the Log4Shell crisis reveals the hidden human cost of our software supply chain. Christian and his team, mostly volunteers, suddenly found themselves responsible for patching a vulnerability affecting half the internet. The pressure was immense and deeply personal.
Some of us stopped sleeping. We all felt that either we fix it right now in the next few days, or we close this project.
Fixing the initial vulnerability led to the discovery of additional issues, creating what Christian describes as ‚Äúa bag of water with a hole. When you patch the hole, you see another one.‚Äù
Meanwhile, the community response was mixed. ‚ÄúOn the one hand, you have people who really hate you, and on the other hand, you have people who are really behind you,‚Äù Christian explains.
Nobody stops in to check on you. They check on the project. There‚Äôs also nobody standing up and saying, ‚Äòhey, thank you for the good work you‚Äôre doing to remediate this issue.‚Äô
How the GitHub Secure Open Source Fund is strengthening security
The Log4Shell incident highlighted a critical gap in open source security: Maintainers often lack the training and resources to build security into their projects from the ground up. This realization sparked initiatives like the GitHub Secure Open Source Fund, which provides both funding and security training to critical open source projects.
The fund has been effective and efficient as a form of proactive protection, pooled resources, and shared responsibility. Think of it as ‚Äúinsurance‚Äù for the open source supply chain‚Äîhelping make the digital ecosystem safer and reducing risks that could impact billions of users.
security training program, and the impact was transformative.
The training didn‚Äôt just provide technical knowledge‚Äîit shifted his perspective. Christian explains, ‚ÄúWith this training, developers are no longer the weakest link. Instead, they‚Äôre the first line of defense.‚Äù
This change in mindset is crucial. As Christian puts it:
Ignorance is by far the worst and most critical security hole. It will basically break all software.
When asked if the GitHub Secure Open Source Fund training could have prevented Log4Shell, Christian is direct: ‚ÄúIf this training had existed five years ago, maybe Log4Shell wouldn‚Äôt be here today.‚Äù
The Log4Shell incident taught the industry several critical lessons about secure development practices:
: Never trust data that crosses trust boundaries, especially in foundational libraries that process user input.
: Log4j now ships with JNDI lookups disabled by default.
: Modern applications need multiple layers of protection, from input validation to runtime protections.
: Tools like GitHub‚Äôs code scanning and Dependabot can catch vulnerabilities before they reach production.
: When Log4Shell hit, many organizations couldn‚Äôt determine if they were affected because they didn‚Äôt know their dependencies.
‚ÄúI got phone calls from colleagues, asking me: ‚ÄòAm I really affected?‚Äô SBOMs give you a technical way to find out what dependencies you‚Äôre using in a project,‚Äù Christian explains.
While the technical lessons from Log4Shell are crucial, technology changes aren‚Äôt enough. The deeper challenge lies in how we support the humans who maintain the open source infrastructure our world depends on. This crisis exposed several systemic issues in how we approach open source sustainability and security:
: ‚ÄúIf you‚Äôre maintaining open source software, just as one single person, that‚Äôs a risk,‚Äù Christian emphasizes.
: Traditional security education often doesn‚Äôt reach the maintainers who need it most.
: While financial support helps, Christian found that training and community were equally important. When offered funding to pay team members, many declined due to tax implications or existing jobs.
: ‚ÄúBehind every small open source library, there‚Äôs a human writing the code,‚Äù Christian reminds us. ‚ÄúIf you find something that‚Äôs not right, help out instead of being angry.‚Äù
: During the program, Christian implemented multiple new security improvements, including hardening GitHub Actions against script injections, developing a new threat model, and collaborating with ScanCode to identify hidden Log4j artifacts in third-party code.
The Log4Shell story isn‚Äôt just about one vulnerability; it‚Äôs about the collective responsibility we all share in maintaining the open source ecosystem that powers the modern internet.
to help downstream users understand their dependencies, and
Invest engineering time in the upstream projects you depend on. Don‚Äôt just consume open source‚Äîcontribute with code, documentation, security reviews, and funding.
: Select carefully the new dependencies that you pull in, for example by
. Consider the data you process may be attacker controlled and strictly validate untrusted inputs to prevent unintended behavior. Contribute test cases and documentation.
has an 8.3 OpenSSF score, which demonstrates good security practices.
But the broader lesson extends beyond any single project. As Christian puts it:
Learning is the only cure for ignorance. So just keep learning.
The Log4Shell incident showed us how quickly our digital world can be threatened by a single vulnerability. But it also demonstrated the power of the open source community to respond, adapt, and improve. The question isn‚Äôt whether the next critical vulnerability will emerge‚Äîit‚Äôs whether we‚Äôll be ready for it.
Ready to strengthen your open source project‚Äôs security?
The GitHub Secure Open Source Fund provides funding, training, and resources to help maintainers build more secure software:
to the GitHub Secure Open Source Fund and help make open source safer for everyone.
and support a more secure open source future. Join us on this mission to secure the software supply chain ‚Äî at scale!
We couldn‚Äôt do this without our incredible network of partners. Together, we are helping secure the open source ecosystem for everyone!
Alfred P. Sloan Foundation, American Express, Chainguard, Datadog, Herodevs, Kraken, Mayfield, Microsoft, Shopify, Stripe, Superbloom, Vercel, Zerodha, 1Password
Ecosyste.ms, CURIOSS, Digital Data Design Institute Lab for Innovation Science, Digital Infrastructure Insights Fund, Microsoft for Startups, Mozilla, OpenForum Europe, Open Source Collective, OpenUK, Open Technology Fund, OpenSSF, Open Source Initiative, OpenJS Foundation, University of California, Santa Cruz OSPO, Sovereign Tech Agency, SustainOSS
The human cost of maintaining critical infrastructure
How the GitHub Secure Open Source Fund is strengthening security
Securing the supply chain at scale: Starting with 71 important open source projects
Learn how the GitHub Secure Open Source Fund helped 71 open source projects significantly improve their security posture through direct funding, expert guidance, and actionable playbooks.
From karaoke terminals to AI r√©sum√©s: The winners of GitHub‚Äôs For the Love of Code challenge
This summer, we invited devs to participate in our hackathon for joyful, ridiculous, and wildly creative projects. Here are the winners of For the Love of Code!
Accelerate developer productivity with these 9 open source AI and MCP projects
GitHub Copilot and VS Code teams, along with the Microsoft Open Source Program Office (OSPO), sponsored these nine open source MCP projects that provide new frameworks, tools, and assistants to unlock AI-native workflows, agentic tooling, and innovation.
20 Years of Git, 2 days at GitHub HQ: Git Merge 2025 highlights üéâ
Git Merge 2025 celebrated 20 years of Git with talks, collaboration, and community. Catch the highlights and recordings.
Everything you need to master GitHub, all in one place.
Build what‚Äôs next on GitHub, the place for anyone from anywhere to build anything.
Meet the companies and engineering teams that build with GitHub.
Last chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco.
Discover tips, technical guides, and best practices in our biweekly newsletter just for devs.
Yes please, I‚Äôd like GitHub and affiliates to use my information for personalized communications, targeted advertising and campaign effectiveness. See the