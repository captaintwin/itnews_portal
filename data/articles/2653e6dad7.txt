How to update community health files with AI - The GitHub Blog
Learn about artificial intelligence and machine learning across the GitHub ecosystem and the wider industry.
Explore the capabilities and benefits of AI code generation and how it can improve your developer experience.
Resources for developers to grow in their skills and careers.
Learn how to move into your first professional role.
Learn how to start building, shipping, and maintaining software with GitHub.
Get an inside look at how we’re building the home for all developers.
Discover how we deliver a performant and highly available experience across the GitHub platform.
Explore best practices for building software at scale with a majority remote team.
Get a glimpse at the technology underlying the world’s leading AI-powered developer platform.
Learn how we build security into everything we do across the developer lifecycle.
Find out what goes into making GitHub the home for all developers.
How we use GitHub to be more productive, collaborative, and secure
Our engineering and security teams do some incredible work. Let’s take a look at how we use GitHub to be more productive, build collaboratively, and shift security left.
Explore how to write, build, and deploy enterprise software at scale.
Automating your way to faster and more secure ships.
Tips, tools, and tricks to improve developer collaboration.
GitHub recognized as a Leader in the Gartner® Magic Quadrant™ for AI Code Assistants
Learn why Gartner positioned GitHub as a Leader for the second year in a row.
Keep up with what’s new and notable from inside GitHub.
An inside look at news and product updates from GitHub.
The latest on GitHub’s platform, products, and tools.
The latest policy and regulatory changes in software.
Data-driven insights around the developer ecosystem.
Learn how to use retrieval-augmented generation (RAG) to capture more insights.
Organizations worldwide are incorporating open source methodologies into the way they build and ship their own software.
Learn about core challenges in DevSecOps, and how you can start addressing them with AI and automation.
Learn about artificial intelligence and machine learning across the GitHub ecosystem and the wider industry.
Explore the capabilities and benefits of AI code generation and how it can improve your developer experience.
Resources for developers to grow in their skills and careers.
Learn how to move into your first professional role.
Learn how to start building, shipping, and maintaining software with GitHub.
Get an inside look at how we’re building the home for all developers.
Discover how we deliver a performant and highly available experience across the GitHub platform.
Explore best practices for building software at scale with a majority remote team.
Get a glimpse at the technology underlying the world’s leading AI-powered developer platform.
Learn how we build security into everything we do across the developer lifecycle.
Find out what goes into making GitHub the home for all developers.
How we use GitHub to be more productive, collaborative, and secure
Our engineering and security teams do some incredible work. Let’s take a look at how we use GitHub to be more productive, build collaboratively, and shift security left.
Explore how to write, build, and deploy enterprise software at scale.
Automating your way to faster and more secure ships.
Tips, tools, and tricks to improve developer collaboration.
GitHub recognized as a Leader in the Gartner® Magic Quadrant™ for AI Code Assistants
Learn why Gartner positioned GitHub as a Leader for the second year in a row.
Keep up with what’s new and notable from inside GitHub.
An inside look at news and product updates from GitHub.
The latest on GitHub’s platform, products, and tools.
The latest policy and regulatory changes in software.
Data-driven insights around the developer ecosystem.
Learn how to use retrieval-augmented generation (RAG) to capture more insights.
Organizations worldwide are incorporating open source methodologies into the way they build and ship their own software.
Learn about core challenges in DevSecOps, and how you can start addressing them with AI and automation.
Have you ever thought about using AI to update community health files for your repositories? This blog shares actionable next steps for doing just that, including a starter kit with a checklist and tutorials on how to create three useful files.
Maintaining your project’s community health files shouldn’t get in the way of writing code.
can help you update and enhance your documentation, so you can stay focused on what really matters: working on the projects that excite you most.
In this blog, we’ll touch on some of the most common community health files (focusing on
, contributor guides, and licenses) and why they’re so important for maintainers, along with actionable steps you can take to add them to your projects. ✨
has evolved from a smart autocomplete tool into a multi-model, agentic assistant that understands your entire codebase and can carry out cross-file refactors, run terminal commands, and even draft pull requests.
What are community health files and why are they so important?
are standardized documents that help maintain a welcoming, organized, and collaborative environment in
. These files communicate expectations, guide contributors, and support the overall health of a repository. They do
include technical documentation or code itself, but rather the scaffolding that supports healthy collaboration. You can typically find them in a repository’s root directory or in a special
folder (if they need to be applied across multiple repositories).
Keeping these files up-to-date should be considered
a practical investment into your project’s future and reputation
, as they’re often the first touchpoint for new contributors, and their existence signals project maturity and maintainability. They not only improve transparency, consistency, and collaboration, but also help set the tone for how contributors and maintainers interact and engage productively.
If crucial community health files are missing or outdated, everyone feels the effects. Picture this: Your open source project starts gaining traction with new contributors. They want to help, but your repository doesn’t have the right files, which leads to contributors unintentionally formatting pull requests incorrectly, opening vague issues, and even introducing security vulnerabilities—all because they didn’t know the proper procedures from the start. Now, your maintainers are overwhelmed and faced with answering the same questions over and over, while also trying to retroactively enforce standards.
It’s clear that the presence of these files helps promote efficiency and clearly communicates best practices, which in turn, creates a better environment for contributors and makes life easier for maintainers—and thanks to AI, the process doesn’t have to be manual. AI tools like GitHub Copilot, for example, can automatically detect missing or stale files, suggest updates, and even generate drafts—saving time and reducing human error.
Here are three common types of community health files and why they’re so important for building a welcoming community (and don’t worry, we’ll tell you exactly how you can generate your own with Copilot later in this blog!):
Often one of the first things a visitor sees when viewing a repository, a
introduces the project and explains its purpose, along with how to get started. Intended to help remove barriers, this document gives your users crucial information they need to quickly get up and running—like what the project is, information on its features, and how to install or use it.
provides guidelines on how contributors can and should participate—things like coding standards and pull request instructions. This guide tells users how they can efficiently contribute and what to expect. For instance, does the project even accept contributions? Contributor guides help set standards and expectations.
specifies the legal terms under which the project can be used, modified, and distributed. In short, it tells people how they can use your software. A common example of this type of file is the MIT License.
Choosing the right kind of license for your project
While you are not required to choose a license for your repository, if you don’t add one, others do not have permission to use, modify, or distribute your code. If you want your repository to be recognized as Open Source, according to the
(OSI) and its definition, you should select a widely used OSI-approved
Here are some resources on how to choose the right license and add it to your repository:
Standardizes the format and information required when submitting issues or pull requests.
Provides instructions for reporting vulnerabilities and outlines the project’s security policy.
Explains how the project is managed, including roles, responsibilities, and decision-making processes.
Defines standards for how to engage in a community.
Shares specific guidance on how others can get help with your project.
Displays a sponsor button in your repository to increase the visibility of funding options for your open source project.
And while it’s not exactly considered a community health file, we wanted to give an honorable mention to… the
, which is an AI configuration that complements health docs. It uses the other community health files as context and tells GitHub Copilot exactly how to interact with the codebase, including what to prioritize or avoid. This file helps ground the LLM—whether you’re using GitHub Copilot or another LLM in VS Code, on
, or Copilot coding agent—giving it an understanding of what your project is and how it’s structured, allowing for consistency across your codebase.
Having these kinds of files in your project is so important, especially when it comes to scaling open source projects where maintainers probably don’t have time to personally help every contributor.
That’s where time-saving tools like GitHub Copilot come in handy. Keep on reading for actionable next steps, tips, and tutorials on the most efficient ways to add these files to your repositories. ✨
Starter kit: How to update community health files using GitHub Copilot
We created a starter kit for you that explains how you can use AI to add these valuable files to your projects, complete with prompting best practices, a checklist full of things to consider, and step-by-step tutorials on how to add three common files to your repository using Copilot. Let’s dive in.
Whether you’re starting from scratch or refining existing documentation, GitHub Copilot can help you write clearer, more consistent community health files with just a few prompts.
One thing to note: The LLMs powering GitHub Copilot are nondeterministic, which means that you can receive different outputs each time you prompt the model.
can drastically improve the quality and relevance of the outputs you get from an LLM, but you’ll still want to verify the accuracy of these outputs, especially when using Copilot to generate more sensitive files like licenses that have legal weight.
Want better suggestions from Copilot when generating community health files? Try these tips when writing your prompts:
project that includes setup instructions, coding standards, and pull request guidelines.”
For an even better prompt, make sure you include important context like audience type, project goals, and tone.
This checklist helps ensure that Copilot-generated content is accurate, inclusive, secure, and aligned with your project’s goals.
Have you reviewed existing community health files in similar or related repositories?
Do you have clear goals for what each file should communicate (e.g., onboarding, behavior expectations, security reporting)?
Are you familiar with your organization’s GitHub usage policies and branding guidelines?
Are your prompts specific and contextual? (e.g., “Generate a
for a Python-based open source project with a code style guide.”)
Have you included examples or tone preferences in your prompt? (e.g., “Use inclusive language and a welcoming tone.”)
Are you avoiding prompts that include sensitive or proprietary information (e.g., internal credentials, private URLs, confidential project names)?
Have you reviewed your repository’s visibility settings (public vs. private) and ensured that community health files are appropriate for that audience?
Are you familiar with GitHub Copilot’s privacy settings and how your prompts and suggestions are handled?
A clear contact method for reporting vulnerabilities?
A brief explanation of how security issues are triaged?
Any relevant links to your organization’s responsible disclosure policy?
Does the generated content reflect your project’s values and community standards?
Have you checked for hallucinated links, names, or policies that don’t exist?
Are all references to external resources accurate and up-to-date?
Have you asked a teammate or contributor to review the generated files?
Have you tested any instructions (e.g., setup steps in
Are you open to iterating based on community feedback?
In this tutorial, we’ll walk through how you can use Copilot to quickly and easily update
provides a clear overview of your project, helping users and contributors quickly understand its purpose, setup, and usage. Without it, potential users could abandon your repository due to confusion or lack of context.
(e.g., Claude for strong writing and coding support).
for my project. Ensure it includes installation instructions, a project overview, and follows standard
. Copilot will analyze your project files and generate a structured
A license defines how others can legally use, modify, and distribute your code, protecting both your rights and theirs. It removes ambiguity and prevents misuse, making your project safer to adopt and contribute to.
Type the following prompt: “Can you add [the license you want] to my project?”
to ensure it’s accurate (especially any copyright owner names and statements).
A contributor guide streamlines collaboration by outlining contribution standards, workflows, and expectations. This makes it easier for others to get involved with your project. The goal is to reduce friction and errors while also encouraging consistent, scalable contributions.
“Create a contributing guide file that follows best practices and link it in the
GitHub Copilot isn’t just for writing code—it can be your documentation sidekick, too. Helping you write smarter, faster, and with less friction, Copilot sharpens your community health files, scales best practices, and turns good intentions into great documentation.
The result? Better docs, stronger communities, and happier maintainers.
What are community health files and why are they so important?
Choosing the right kind of license for your project
Starter kit: How to update community health files using GitHub Copilot
How to find, install, and manage MCP servers with the GitHub MCP Registry
Learn how to bring structure and security to your AI ecosystem with the GitHub MCP Registry, the single source of truth for managing and governing MCP servers.
The road to better completions: Building a faster, smarter GitHub Copilot with a new custom model
Find out about the latest custom models powering the completions experience in GitHub Copilot.
Copilot: Faster, smarter, and built for how you work now
Discover how GitHub Copilot has evolved from a high-powered autocomplete tool to a powerful, multi-model agentic assistant.
Everything you need to master GitHub, all in one place.
Build what’s next on GitHub, the place for anyone from anywhere to build anything.
Meet the companies and engineering teams that build with GitHub.
Last chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco.
Discover tips, technical guides, and best practices in our biweekly newsletter just for devs.
Yes please, I’d like GitHub and affiliates to use my information for personalized communications, targeted advertising and campaign effectiveness. See the