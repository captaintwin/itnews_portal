# utils/scheduler_poster.py
import json
import time
from datetime import datetime, timedelta
from pathlib import Path

import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Bot

from utils.post_to_telegram import send_post
from core.config import TELEGRAM_CHAT, REPORT_TELEGRAM_TOKEN
from core.logger import log


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
tz = pytz.timezone("Europe/Belgrade")
SELECTED_FILE = Path("data/selected.json")


def schedule_posts():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ç–µ—Ö—á–∞—Ç."""
    if not SELECTED_FILE.exists():
        log.warning("‚ö†Ô∏è data/selected.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–µ—á–µ–≥–æ –ø–æ—Å—Ç–∏—Ç—å.")
        return

    with SELECTED_FILE.open("r", encoding="utf-8") as f:
        selected = json.load(f)

    if not selected:
        log.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç.")
        return

    # === –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ===
    scheduler = BackgroundScheduler(timezone=tz)
    now = datetime.now(tz)
    start_time = now + timedelta(minutes=10)  # —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞
    end_time = now.replace(hour=23, minute=0, second=0, microsecond=0)

    total_minutes = max(1, (end_time - start_time).total_seconds() / 60)
    interval = total_minutes / len(selected)

    schedule_plan = []
    for i, item in enumerate(selected):
        post_time = start_time + timedelta(minutes=i * interval)
        scheduler.add_job(send_post, "date", run_date=post_time, args=[item])

        schedule_plan.append({
            "title": item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:180],
            "source": item.get("source", ""),
            "time": post_time.strftime("%Y-%m-%d %H:%M"),
        })
        log.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {item.get('title', '')[:60]} ‚Äî {post_time.strftime('%H:%M')}")

    # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ç–µ—Ö—á–∞—Ç ===
    send_schedule_report(schedule_plan)

    # === –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
    scheduler.start()
    log.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü–æ—Å—Ç–∏–Ω–≥ –∏–¥—ë—Ç –≤ —Ñ–æ–Ω–µ.")

    try:
        while True:
            time.sleep(60)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        log.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


def send_schedule_report(plan: list[dict]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç —Å –ø–ª–∞–Ω–æ–º –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ—Ö—á–∞—Ç."""
    if not TELEGRAM_CHAT or not REPORT_TELEGRAM_TOKEN:
        log.error("‚ùå –ù–µ—Ç REPORT_TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û—Ç—á—ë—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    bot = Bot(token=TELEGRAM_CHAT)

    lines = ["<b>üóì –ü–ª–∞–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>", ""]
    for item in plan:
        lines.append(f"üïí {item['time']}\n<b>{item['title']}</b>\n<i>{item['source']}</i>\n")
    text = "\n".join(lines).strip()

    try:
        bot.send_message(chat_id=REPORT_TELEGRAM_TOKEN, text=text, parse_mode="HTML")
        log.info("üì® –û—Ç—á—ë—Ç —Å –ø–ª–∞–Ω–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö—á–∞—Ç.")
    except Exception as e:
        log.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –≤ —Ç–µ—Ö—á–∞—Ç: {e}")
