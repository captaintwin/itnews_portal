# utils/scheduler.py
import json
import random
import os
from datetime import datetime, timedelta
from pathlib import Path
import pytz
from telegram import Bot
from core.logger import log


# === –ü—É—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)
SELECTED_FILE = DATA_DIR / "selected.json"
SCHEDULE_FILE = DATA_DIR / "schedule.json"

# === Telegram ===
BOT_TOKEN = os.getenv("REPORT_TELEGRAM_TOKEN")
TECH_CHAT_ID = os.getenv("TELEGRAM_CHAT")

# === –õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ===
tz = pytz.timezone("Europe/Belgrade")


def build_schedule(
    start_hour: int = 9,
    end_hour: int = 21,
    per_source_limit: int = 5,
    daily_limit: int = 20,
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –¥–µ–Ω—å.
    - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º per_source_limit —Å—Ç–∞—Ç–µ–π —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    - –º–∞–∫—Å–∏–º—É–º daily_limit –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å
    - –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ data/schedule.json
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ç–µ—Ö—á–∞—Ç
    """

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
    if not SELECTED_FILE.exists():
        log.warning("‚ö†Ô∏è –§–∞–π–ª selected.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ—á–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.")
        return []

    with open(SELECTED_FILE, "r", encoding="utf-8") as f:
        selected = json.load(f)

    if not selected:
        log.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return []

    # === –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ===
    filtered = []
    source_counter = {}
    for item in selected:
        src = item.get("source", "unknown")
        if source_counter.get(src, 0) < per_source_limit:
            filtered.append(item)
            source_counter[src] = source_counter.get(src, 0) + 1

    # === –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º, —á—Ç–æ–±—ã —á–µ—Ä–µ–¥–æ–≤–∞–ª–∏—Å—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ===
    random.shuffle(filtered)

    # === –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ===
    if len(filtered) > daily_limit:
        filtered = filtered[:daily_limit]
        log.info(f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–Ω–µ–≤–Ω—ã–º –ª–∏–º–∏—Ç–æ–º: {daily_limit} —Å—Ç–∞—Ç–µ–π.")
    else:
        log.info(f"üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(filtered)}")

    news_count = len(filtered)
    if news_count == 0:
        log.warning("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞—Ç–µ–π.")
        return []

    # === –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ ===
    now = datetime.now(tz)
    start_time = now.replace(hour=start_hour, minute=0, second=0, microsecond=0)
    end_time = now.replace(hour=end_hour, minute=0, second=0, microsecond=0)

    if now > start_time:
        start_time = now + timedelta(minutes=5)

    total_minutes = (end_time - start_time).total_seconds() / 60
    interval = total_minutes / news_count

    # === –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω ===
    schedule = []
    for i, item in enumerate(filtered):
        post_time = start_time + timedelta(minutes=i * interval)
        schedule.append({
            "time": post_time.strftime("%Y-%m-%d %H:%M"),
            "title": item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "source": item.get("source", ""),
            "url": item.get("url", ""),
            "id": item.get("id", ""),
        })

    # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω ===
    with open(SCHEDULE_FILE, "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)

    first_time = schedule[0]["time"].split(" ")[1]
    last_time = schedule[-1]["time"].split(" ")[1]
    log.info(
        f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {news_count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π "
        f"—Å {first_time} –¥–æ {last_time} (–∏–Ω—Ç–µ—Ä–≤–∞–ª ~{interval:.1f} –º–∏–Ω)"
    )

    # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç ===
    send_schedule_report(schedule)

    return schedule


def send_schedule_report(plan):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ç–µ—Ö—á–∞—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ –ø–ª–∞–Ω–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π."""
    if not BOT_TOKEN or not TECH_CHAT_ID:
        log.warning("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_CHAT –∏–ª–∏ REPORT_TELEGRAM_TOKEN.")
        return

    bot = Bot(token=BOT_TOKEN)
    text = "<b>üóì –ü–ª–∞–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –¥–µ–Ω—å</b>\n\n"

    for item in plan:
        text += f"üïí {item['time']}\n<b>{item['title']}</b>\n<i>{item['source']}</i>\n\n"

    try:
        bot.send_message(chat_id=TECH_CHAT_ID, text=text.strip(), parse_mode="HTML")
        log.info("üì® –ü–ª–∞–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö—á–∞—Ç.")
    except Exception as e:
        log.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –≤ Telegram: {e}")
