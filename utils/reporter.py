import json
from datetime import datetime
from dotenv import load_dotenv
from pathlib import Path
from telegram import Bot
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
env_path = Path(__file__).resolve().parents[1] / ".env"
load_dotenv(dotenv_path=env_path)

REPORT_FILE = Path("data/report.txt")
SCHEDULE_FILE = Path("data/schedule.json")
TECH_CHAT = os.getenv("TELEGRAM_CHAT")
BOT_TOKEN = os.getenv("REPORT_TELEGRAM_TOKEN")


def send_report(selected: list[dict]):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤."""
    if not selected:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π ‚Äî –æ—Ç—á—ë—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
        return

    today = datetime.now().strftime("%d.%m.%Y %H:%M")
    total = len(selected)

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å ===
    if SCHEDULE_FILE.exists():
        try:
            schedule = json.loads(SCHEDULE_FILE.read_text(encoding="utf-8"))
        except Exception:
            schedule = []
    else:
        schedule = []

    # === –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ===
    sources = {}
    for i, n in enumerate(selected):
        src = n.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
        n["_schedule_time"] = schedule[i] if i < len(schedule) else None
        sources.setdefault(src, []).append(n)

    # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-–æ—Ç—á—ë—Ç–∞ ===
    lines = [
        f"<b>üóì –ü–ª–∞–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ {today}</b>",
        f"–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: <b>{total}</b>",
        "",
    ]

    for src, items in sources.items():
        lines.append(f"<b>üìö {src}</b> ‚Äî {len(items)} —Å—Ç–∞—Ç–µ–π")
        for n in sorted(items, key=lambda x: -x.get("char_count", 0))[:3]:
            title = n.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").strip().replace("<", "&lt;").replace(">", "&gt;")
            length = n.get("char_count", 0)
            pub_time = n.get("_schedule_time")
            if pub_time:
                lines.append(f" ‚Ä¢ {title}\n   ‚è∞ <i>{pub_time}</i> ‚Äî {length} –∑–Ω–∞–∫–æ–≤")
            else:
                lines.append(f" ‚Ä¢ {title} <i>({length} –∑–Ω–∞–∫–æ–≤)</i>")
        lines.append("")

    text = "\n".join(lines).strip()

    # === –õ–æ–∫–∞–ª—å–Ω—ã–π .txt –æ—Ç—á—ë—Ç (–±–µ–∑ HTML) ===
    plain_text = text.replace("<b>", "").replace("</b>", "").replace("<i>", "").replace("</i>", "")
    REPORT_FILE.parent.mkdir(parents=True, exist_ok=True)
    REPORT_FILE.write_text(plain_text, encoding="utf-8")

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
    if not BOT_TOKEN or not TECH_CHAT:
        print("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_CHAT –∏–ª–∏ REPORT_TELEGRAM_TOKEN ‚Äî –æ—Ç—á—ë—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    bot = Bot(token=BOT_TOKEN)
    try:
        bot.send_message(chat_id=TECH_CHAT, text=text, parse_mode="HTML")
        print(f"‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö—á–∞—Ç ({total} —Å—Ç–∞—Ç–µ–π).")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")
