# utils/post_next.py
import json
import time
import argparse
from datetime import datetime
from pathlib import Path
import pytz
from core.logger import log
from utils.post_to_telegram import send_post

# === –ü—É—Ç–∏ ===
DATA_DIR = Path("data")
SCHEDULE_FILE = DATA_DIR / "schedule.json"
SELECTED_FILE = DATA_DIR / "selected.json"
SENT_FILE = DATA_DIR / "sent_news.json"

# === –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ===
tz = pytz.timezone("Europe/Belgrade")


def load_json(path, default):
    if path.exists():
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path.name}: {e}")
    return default


def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def post_next(instant=False):
    """–§–æ–Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ instant=True."""
    log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")

    schedule = load_json(SCHEDULE_FILE, [])
    selected = load_json(SELECTED_FILE, [])
    sent = set(load_json(SENT_FILE, []))

    if not schedule or not selected:
        log.warning("‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π ‚Äî –ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    # === –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–µ–π ===
    schedule_map = {}
    for i, s in enumerate(schedule):
        try:
            t = s["time"] if isinstance(s, dict) else s
            news_id = s.get("id") if isinstance(s, dict) else selected[i].get("id")
            schedule_map[news_id] = datetime.strptime(t, "%Y-%m-%d %H:%M")
        except Exception:
            continue

    log.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {len(schedule_map)} –ø–æ—Å—Ç–æ–≤.")

    if instant:
        log.info("‚ö° –†–µ–∂–∏–º instant: –ø—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å—Ä–∞–∑—É.")
        for item in selected:
            news_id = item.get("id")
            if news_id in sent:
                continue
            try:
                send_post(item)
                sent.add(news_id)
                save_json(SENT_FILE, list(sent))
                log.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {item['title']}")
                time.sleep(2)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {item.get('title')}: {e}")
        return

    # === –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (—Ñ–æ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏) ===
    while True:
        now = datetime.now(tz)
        for item in selected:
            news_id = item.get("id")
            post_time = schedule_map.get(news_id)
            if not post_time:
                continue

            if post_time.tzinfo is None:
                post_time = tz.localize(post_time)

            if news_id in sent:
                continue

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è >= –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞
            if now >= post_time:
                try:
                    send_post(item)
                    sent.add(news_id)
                    save_json(SENT_FILE, list(sent))
                    log.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {item['title']}")
                except Exception as e:
                    log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {item.get('title')}: {e}")

        time.sleep(60)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Post IT news according to schedule")
    parser.add_argument("--instant", action="store_true", help="publish all posts immediately")
    args = parser.parse_args()

    post_next(instant=args.instant)
