import json
from pathlib import Path
from collections import defaultdict
from core.logger import log  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–≤–æ–π –ª–æ–≥–≥–µ—Ä

NEWS_FILE = Path("data/news.json")
ARTICLES_DIR = Path("data/articles")
SELECTED_FILE = Path("data/selected.json")


def analyze_articles(top_n=3):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ top_n —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    if not NEWS_FILE.exists():
        log.warning(f"‚ö†Ô∏è –§–∞–π–ª {NEWS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(NEWS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
        news = data.get("items", data)

    # –ü–æ–¥—Å—á—ë—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
    for n in news:
        art_path = ARTICLES_DIR / f"{n['id']}.txt"
        if art_path.exists():
            try:
                text = art_path.read_text(encoding="utf-8")
                n["char_count"] = len(text)
            except Exception as e:
                log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {art_path}: {e}")
                n["char_count"] = 0
        else:
            n["char_count"] = 0

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    grouped = defaultdict(list)
    for n in news:
        src = n.get("source", "unknown")
        grouped[src].append(n)

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –±–µ—Ä—ë–º top_n —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö
    selected = []
    for src, items in grouped.items():
        items = [n for n in items if n["char_count"] > 0]
        items.sort(key=lambda x: x["char_count"], reverse=True)
        top_items = items[:top_n]
        selected.extend(top_items)
        log.info(f"üìö {src}: –≤—ã–±—Ä–∞–Ω–æ {len(top_items)} –∏–∑ {len(items)} —Å—Ç–∞—Ç–µ–π")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    SELECTED_FILE.parent.mkdir(parents=True, exist_ok=True)
    with open(SELECTED_FILE, "w", encoding="utf-8") as f:
        json.dump(selected, f, ensure_ascii=False, indent=2)

    log.info(f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–æ–±—Ä–∞–Ω–æ {len(selected)} —Å—Ç–∞—Ç–µ–π –∏–∑ {len(grouped)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    return selected
